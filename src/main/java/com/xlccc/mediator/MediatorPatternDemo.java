package com.xlccc.mediator;

/**
 * @author Linker
 * @date 2020/7/13 19:14
 * @Description:中介者模式(Mediator Pattern) 降低多个对象和类之间的通信复杂性。
 * 行为型模式，提供一个中介类，该类通常处理不同类之间的通信，支持送耦合，使代码易于维护。
 * <p>
 * 意图：一个中介对象来封装一系列的对象交互，中介者使各对象不需要显示地相互引用，从而使耦合松散，而且可独立修改其之间交互。
 * 主要解决：对象与对象之间存在大量地关联关系，导致系统地结构复杂，同时若一个对象改变，我们需要跟踪与之关联的对象，同时做出相应处理。
 * 何时解决：多个类相互耦合，形成了网状结构。
 * 如何解决：将上述网状结构分离为星型结构
 * 关键代码：对象Colleague之间的通信封装到一个类中单独处理。
 * 应用实例：1.MVC框架中，C（控制器）就是M（模型）和V（视图）的中介者。2.机场调度系统
 * <p>
 * 优点：1.降低了类的复杂度，将一对多转化为了一对一。2.各个类之间解耦。3.符合迪米特原则。
 * 缺点：中介者会庞大，变得复杂难以维护。
 * 使用场景：1.系统中对象之间存在比较复杂的引用关系，导致依赖关系结构混乱而且难以复合该对象。
 * 2.向通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。
 * <p>
 * 注意事项：不应当在职责混乱的时候使用。
 */
public class MediatorPatternDemo {
    public static void main(String[] args) {

        //使用Dog对象来显示他们之间的通信
        Dog lily = new Dog("Lily");
        Dog lily2 = new Dog("lily2");

        lily.action("wang wang");
        lily2.action("gu gu ");
    }
}
