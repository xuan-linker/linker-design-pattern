package com.xlccc.bridge;

/**
 * @author Linker
 * @date 2020/7/10 22:40
 * @Description：使用Boy和Girl类调用Say（）方法 5-1
 * <p>
 * 桥接模式（Bridge）
 * 用于把抽象化与现实化解耦。
 * 结构型模式。通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。
 * <p>
 * <p>
 * 意图：将抽象部分与实现部分分离，使它们都可以独立的变化。
 * 主要解决：在多有种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活
 * 何时使用：实现系统可能有多个角度分类，每一种角度都可能变化。
 * 关键代码：抽象类依赖实现类。
 * <p>
 * 优点：1.抽象和实现分离。
 * 2.优秀的扩展能力。
 * 3.实现细节对客户透明
 * <p>
 * 缺点：桥接模式引入会增加系统的理解和设计难度，由于聚合关联建立在抽象层，要求开发者针对抽象进行设计与编程。
 * <p>
 * 使用场景：1.一个系统需要在构建的抽象化角色之间增加更多灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使他们在抽象层建立一个关联关系。
 * 2.对于不希望使用继承或因为多层次继承导致系统类个数急剧增加的系统。
 * 3.一个类存在两个独立变化的维度，且者两个维度都需要进行扩展。
 * <p>
 * 注意：对于两个独立变化的维度，使用桥接模式十分适合。
 */
public class BridgePatternDemo {
    public static void main(String[] args) {
        People boy = new BoysAndGirls("bird", "nice to meet you.", new Boy());
        People girl = new BoysAndGirls("deep", "duck ", new Girl());

        boy.say();
        girl.say();
    }
}
