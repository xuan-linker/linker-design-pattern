package com.xlccc.facade;

/**
 * @author Linker
 * @date 2020/7/13 11:41
 * @Description:外观模式(Facade Pattern) 隐藏系统的复杂性，并向客户端提供一个客户端可以访问系统的接口。
 * 结构型模式。向现有系统添加一个接口，来隐藏系统的复杂性。
 * 涉及到一个单一的类，该类提供客户端请求的简化方法和对现有系统类方法的委托调用。
 * <p>
 * 意图：为子系统中的一组接口提供一个一致的界面，
 * 主要解决：降低访问复杂系统的内部子系统的复杂度，简化客户端与之的接口。
 * 何时使用：客户端不与系统耦合，外观类与系统耦合。
 * 关键代码：在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。
 * 应用实例：Java的三层开发模式
 * <p>
 * 优点：1.减少系统相互依赖。2.提高灵活性。3.提高安全性
 * 缺点：不符合开闭原则，如果要修改比较麻烦，继承重写都不合适。
 * <p>
 * 使用场景：1.为复杂的模块或子系统提供外界访问的模块。2.子系统相对独立。3.预防低水平人员带来的风险
 * <p>
 * 注意事项：层次化结构中，可以使用外观模式定义系统中每一层的入口。
 */
public class FacadePatternDemo {
    public static void main(String[] args) {
        AnimalMaker maker = new AnimalMaker();

        maker.catSay();
        maker.cowSay();
        maker.dogSay();
    }
}
